/*
 * This list will be similar to the functionality of list1 in which it will check all nodes of the list
 * and if the word is equal to one of the words then it will be incremented and sent to the front of the list
 * otherwise the node will be automatically placed at the front. This list was made by Zackery Hengartner.
 */
public class List3 extends BaseList<String>
{

	@Override
	public void add(String word)
	{
		
		if (list == null)
		{
			LLNode<String> newNode = new LLNode<String>(word);   
			refChanges++;
			newNode.setNext(list); //sets a link to the old pointer of list                         
			list = newNode; //becomes the new pointer of list
			refChanges++; //increment the reference changes
			return;
		}
		
		if (list.getNext() == null)
		{
			if (word.equals(list.getInfo()))
			{
				list.incCount();
				return;
			}
			else
			{
				LLNode<String> newNode = new LLNode<String>(word);   
				refChanges++;
				newNode.setNext(list); //sets a link to the old pointer of list                         
				list = newNode; //becomes the new pointer of list
				refChanges++; //increment the reference changes	
				return;
			}
		}
		LLNode<String> listCheck = list.getNext();
		LLNode<String> oneBehind = list;
		
		keyCompare++;
		if (word.equals(list.getInfo()))
		{
			list.incCount();
			return;
		}
		while (listCheck != null) //iterate through the list
		{
			keyCompare++; //increase the key comparisons
			if (word.equals(listCheck.getInfo())) //if the string is already in a node
			{
				listCheck.incCount(); //increase the count of the word
				refChanges++;
				refChanges++;
				refChanges++;
				oneBehind.setNext(listCheck.getNext());
				listCheck.setNext(list);
				list = listCheck;
				return; //break the iteration loop
			}
			oneBehind = listCheck;
			listCheck = listCheck.getNext(); //makes list refer to the next 
		}
			LLNode<String> newNode = new LLNode<String>(word);   
			refChanges++;
			newNode.setNext(list); //sets a link to the old pointer of list                         
			list = newNode; //becomes the new pointer of list
			refChanges++; //increment the reference changes
			return;
		
	}


}
